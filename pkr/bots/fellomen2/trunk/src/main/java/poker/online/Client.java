/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker.online;import java.lang.*;import java.net.*;import java.io.*;import java.util.*;/** * A client opens a socket to a server at the specified  * address and port. * * @author	Aaron Davidson <davidson@cs.ualberta.ca> * @version	1.0.0 */public class Client extends Portal {	private Socket 					sok;	private boolean 				connected = false;	private String					gIP;	private String					errStr;	private	int						gPort;		/**	 * Construct a Client.	 * @param IP a string containing the IP address to connect to	 * @param port the port to connect to	 */	public Client(String IP, int port) {		gIP = IP;		gPort = port;	}		/**	 * Connect to the destination. Currently unthreaded.	 * @return true if a connection has been made.	 */	public boolean connect() {		try {			sok = new Socket(gIP, gPort);			if (sok != null) 				return init(sok);			setError("ERROR: Could not create Socket.");		} catch (ConnectException ce) {			setError("ERROR: Connection Exception.");		} catch (UnknownHostException ue) {			setError("ERROR: Unknown Host Exception.");		} catch (IOException ie) {			setError("ERROR: IO Exception.");		} catch (Exception e) {			setError("ERROR: Exception: " + e.getMessage());		}		return false;	}		/**	 * Close the connection gracefully.	 */	public void disconnect() {		if (!connected) return;		try {			close();			sok.close();			connected = false;		} catch (Exception e) {			e.printStackTrace();		}	}	private void setError(String str) {		errStr = str;	}		public String getError() {		return errStr;	}		}