/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker.online;import poker.util.*;import java.lang.*;import java.net.*;import java.io.*;import java.util.*;/** * A Portal handles the reading and writing of data to a socket connection. * * @author	Aaron Davidson <davidson@cs.ualberta.ca> * @version	1.0.2 * @date	Dec.23.1999 */public class Portal {	private BufferedOutputStream 	out = null;	private BufferedInputStream		in = null;	private Socket					sok = null;			/**	 * Default constructor.	 * Portal is not ready for use -- call init() before using it.	 */	public Portal() {}		/**	 * Construct a portal from a socket	 * @param sock the socket to make the portal from	 */	public Portal(Socket sock) {		init(sock);	}			/**	 * Create a Portal from an input and output stream	 * @param in the input stream	 * @param out the output stream	 */	public Portal(BufferedInputStream in, BufferedOutputStream out) {		this.in = in;		this.out = out;	}		/**	 * initialize the Portal to use a socket	 * @param sock the socket to use	 * @return false signals an error	 */	public boolean init(Socket sock) {		sok = sock;				try { sok.setSoTimeout(50000);		} catch (SocketException se) {}				try {			in = new BufferedInputStream(sok.getInputStream());			out = new BufferedOutputStream(sok.getOutputStream());		} catch (IOException e) {			System.out.println("** Portal init error **");			System.out.println(e.getMessage());			return false;		}		return true;	}		/**	 * Set the input of a Portal.	 * @param in the input stream to use	 */	public void setInput(BufferedInputStream in) {		this.in = in;	}			/**	 * Set the output of a Portal.	 * @param out the output stream to use	 */	public void setOutput(BufferedOutputStream out) {		this.out = out;	}		/**	 * close the connections for this Portal.	 */	public boolean close() {		try {			in.close();			out.close();			if (sok != null) sok.close();			return true;		} catch (IOException e) {			System.out.println("[Portal.close()] " + e.getMessage());		}		return false;	}		/**	 * Read the next incoming bytes into a String	 * until the newline character is reached.	 * @return the next line of input	 */	public String readLine() {		try {			StringBuffer s = new StringBuffer();			char c = 0;			while (c != '\n') {				c = (char)in.read();				s.append(c); 			}			return s.toString();		} catch (IOException e) {			System.out.println("[Portal.readLine()] " + e.getMessage());		}		return null;	}		/**	 * Write a string to the output stream.	 * @param s the string to write	 */	public void writeString(String s) throws IOException {		out.write(s.getBytes(),0,s.length());		out.flush();	}	/**	 * Write an object to the output stream	 * @param ob the object to write	 */	public void writeObject(Object ob) {		try {			ObjectOutputStream oout = new ObjectOutputStream(out);			oout.writeObject(ob);			System.out.println("===> [object]");		} catch (IOException e) {			System.out.println(e.getMessage());		}	}		/**	 * Read an object from the input stream	 * @return the object which was read	 */	public Object readObject() {		try {			ObjectInputStream oin = new ObjectInputStream(in);			Object o = oin.readObject();			System.out.println("<=== [object]");			return o;		} catch (Exception e) {			System.out.println(e.getMessage());		} 		return null;	}		/**	 * Read the next byte from the input stream	 * @return contains the byte value or -1 if there was an error	 */	public int readByte() throws IOException {		int b = in.read();		return b;	}		/**	 * Read the next byte from the input stream	 * @return contains the byte value or -1 if there was an error	 */	/*public byte[] readBytes(int len) throws IOException {		int r = 0;		byte[] b = new byte[len];		while (r != -1 && r < len)			r += in.read(b,0,len-r);		return b;	}*/			/**	 * Write a byte to the output stream	 * @param the byte to write	 */	public void writeByte(byte b) throws IOException {		out.write(b);		out.flush();	}				/**	 * Write a byte to the output stream	 * @param the byte to write	 */	public void writeBytes(byte[] b) throws IOException {		out.write(b,0,b.length);		out.flush();	}		/**	 * Read the next 4 bytes from the input stream	 * @return contains the int value read	 */	public int readInt() throws IOException {		ByteArray b = new ByteArray(4);		b.append((byte)in.read());		b.append((byte)in.read());		b.append((byte)in.read());		b.append((byte)in.read());				return b.getInt(0);	}		/**	 * Write an int to the output stream	 * @param the int to write	 */	public void writeInt(int i) throws IOException {		ByteArray b = new ByteArray(4);		b.append(i);		out.write(b.getByte(0));		out.write(b.getByte(1));		out.write(b.getByte(2));		out.write(b.getByte(3));		out.flush();	}		/**	 * Get the address at the other end of the portal.	 * @return the address with whom we are communicating to.	 */	public String getAddress() {		return sok.getInetAddress().getHostAddress();	}		public String getAddressName() {		return sok.getInetAddress().getHostName();	}	public int getPort() {		return sok.getPort();	}		public boolean unread() {		try {			return (in.available() > 0);		} catch (IOException e) {			return false;		}	}		private void report(String s) {		System.out.println(s);	}		}