/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker.ai.model;import poker.*;import poker.ai.*;import poker.util.*;import java.util.*;import java.io.*;/** * Stores and manages player Action Frequencies in simplified * contexts for simple opponent modelling. * * @author  Aaron Davidson * @version 1.0.0 */public class ContextPredictor implements Predictor, Serializable {	private transient Randomizer rand = new Randomizer();	private Hashtable actions;	/**	 * Construct from a saved file.	 * @param fName the file name.	 */	public ContextPredictor(String fName) {		load(fName);	}	/**	 * Default Constructor.	 */	public ContextPredictor() {		actions = new Hashtable();	}	public void save(String fName) {		try {	   	ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fName));   		out.writeObject(this);			out.close();  	 	} catch (Exception e) { }	}	public void load(String fName) {		try {	    	ObjectInputStream in = new ObjectInputStream(new FileInputStream(fName));      		ContextPredictor a = (ContextPredictor)in.readObject();			this.actions = a.actions;			in.close();    	} catch (FileNotFoundException fe) {		} catch (Exception e) { }	}	public ProbTriple getFrequency(String label) {		ContextItem ci = (ContextItem)actions.get(label);		if (ci != null) {			return ci.getFrequency();		}		return new ProbTriple();	}	public ProbTriple predictAction(Context c) {			ProbTriple pt = getFrequency(contextString(c));		return pt;	}	public String contextString(Context c) {		return "S"+c.getStage()+         "/B"+c.getBetsToCall()+	         "/C"+c.getCommittment()+	         "/L"+c.getLastAction()+         "/P"+c.getPositionCode();  	}	public void observeAction(Context c) {		addAction(c.getAction(), contextString(c));	}			private void addAction(int a, String label) {		ContextItem ci = (ContextItem)actions.get(label);		if (ci == null) {			ci = new ContextItem(label);			actions.put(label, ci);		}		ci.addAction(a);	}}