/***************************************************************************   Copyright (c) 2000:         University of Alberta,         Deptartment of Computing Science         Computer Poker Research Group         See "Liscence.txt"***************************************************************************/package poker.ai.model;import poker.*;import poker.ai.*;import poker.util.*;import java.util.*;public class ConfusionMatrix {	private double sm[][] = new double[3][3];	private int size = 0;		public ConfusionMatrix() {}	public double getAccuracy() {		return (sm[0][0]+sm[1][1]+sm[2][2])/(double)size;	}		public double getPredictionAccuracy(int pred) {		double total = 0;		total = sm[0][pred] + sm[1][pred] + sm[2][pred];		if (total == 0) return 0;		return sm[pred][pred]/total;	}		public double getActionAccuracy(int pred) {		double total = 0;		total = sm[pred][0] + sm[pred][1] + sm[pred][2];		if (total == 0) return 0;		return sm[pred][pred]/total;	}	public void init() {		for (int i=0;i<3;i++) {			for (int j=0;j<3;j++) {				sm[i][j] = 0;			}		}	}		/**	 * Perform an analysis of the predictor.	 */    public void generate(Vector test_data, Predictor pdr) {    	size = test_data.size(); 	   	init();  		for (int i=0;i<size;i++) {  			Context c = (Context)test_data.elementAt(i);			int action = pdr.predictAction(c).selectMax();			sm[c.getAction()][action]++;				}	}		/**	 * Perform a more sensitive analysis of the predictor.	 */    public void generateFine(Vector test_data, Predictor pdr) {    	size = test_data.size();    	init();  		for (int i=0;i<size;i++) {  			Context c = (Context)test_data.elementAt(i);			ProbTriple pt = pdr.predictAction(c);			sm[c.getAction()][Holdem.FOLD] += pt.getFold();			sm[c.getAction()][Holdem.CALL] += pt.getCall();			sm[c.getAction()][Holdem.RAISE] += pt.getRaise();								}	}		public void print() {		System.out.println("     ------ PREDICTED ------          ");		System.out.println("+---+-------+-------+-------+ +-------+");		System.out.println("| * |   F   |   C   |   R   | | FREQ  |");		System.out.println("+---+-------+-------+-------+ +-------+");		for (int k=0;k<3;k++) {			System.out.print("| "+(k==0?"F":(k==1?"C":"R"))+" |");			for (int j=0;j<3;j++) {				System.out.print(Reporter.pad(" "+Reporter.round(sm[k][j]/size,3),7) +"|");				}			System.out.println(" |"+Reporter.pad(" "+Reporter.round(100*((sm[k][0]+sm[k][1]+sm[k][2])/size),1)+"%",7)+"|" );			System.out.println("+---+-------+-------+-------+ +-------+");		}		System.out.println("+---+-------+-------+-------+ +-------+");		System.out.print("| % |");		for (int k=0;k<3;k++) {			System.out.print( Reporter.pad(" "+Reporter.round(100*((sm[0][k]+sm[1][k]+sm[2][k])/size),1)+"%",7)+"|" );		}		System.out.println(" |"+ Reporter.pad(" "+Reporter.round(100*((sm[0][0]+sm[1][1]+sm[2][2])/size),2),7)+"|" );		System.out.println("+---+-------+-------+-------+ +-------+");	}}