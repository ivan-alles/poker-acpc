/* Copyright 2010-2012 Ivan Alles.
   Licensed under the MIT License (see file LICENSE). */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using ai.pkr.metagame;
using ai.lib.utils;
using ai.pkr.metastrategy.algorithms;
using System.Reflection;
using System.IO;
using ai.pkr.metastrategy;
using ai.lib.algorithms.tree;
using ai.lib.algorithms;

namespace ai.pkr.metastrategy.algorithms.nunit
{
    /// <summary>
    /// Unit tests for CreateActionTreeByGameDef. 
    /// This test uses plain arrays with expected data to verify the created tree.
    /// It is easy to create them for simple games using trees generated by previous generation of software. 
    /// On the other hand, another more sophisticated way would probably be more complex 
    /// because of complexity of tree structure, too many rules have to be taken into account.
    /// </summary>
    [TestFixture]
    public unsafe class CreateActionTreeByGameDef_Test
    {
        #region Tests

        [Test]
        public void Test_Kuhn()
        {
            _gd = XmlSerializerExt.Deserialize<GameDefinition>(
                Props.Global.Expand("${bds.DataDir}ai.pkr.metastrategy/kuhn.gamedef.xml"));
            ActionTree tree = CreateActionTreeByGameDef.Create(_gd);
            VerifyActionTree(tree, _expKuhn);
        }



        [Test]
        public void Test_LeducHe()
        {
            _gd = XmlSerializerExt.Deserialize<GameDefinition>(
                Props.Global.Expand("${bds.DataDir}ai.pkr.metastrategy/leduc-he.gamedef.xml"));
            ActionTree tree = CreateActionTreeByGameDef.Create(_gd);
            VerifyActionTree(tree, _expLeducHe);
        }

        #endregion

        #region Benchmarks
        #endregion

        #region Implementation

        struct VerificationData
        {
            public VerificationData(int depth, int position, double amount, int round, UInt16 activePlayers)
            {
                Depth = depth;
                Position = position;
                Amount = amount;
                Round = round;
                ActivePlayers = activePlayers;
            }

            public int Depth;
            public int Position;
            public double Amount;
            public int Round;
            public UInt16 ActivePlayers;
        }

        #region Kunh expected data
        VerificationData[] _expKuhn = new VerificationData[] 
        { 
            new VerificationData(0, 2, 0.0, -1, 0x3), // Id 0
            new VerificationData(1, 0, 1.0, -1, 0x3), // Id 1
            new VerificationData(2, 1, 1.0, -1, 0x3), // Id 2
            new VerificationData(3, 0, 0.0, 0, 0x3), // Id 3
            new VerificationData(4, 1, 0.0, 0, 0x3), // Id 4
            new VerificationData(4, 1, 1.0, 0, 0x3), // Id 5
            new VerificationData(5, 0, 0.0, 0, 0x2), // Id 6
            new VerificationData(5, 0, 1.0, 0, 0x3), // Id 7
            new VerificationData(3, 0, 1.0, 0, 0x3), // Id 8
            new VerificationData(4, 1, 0.0, 0, 0x1), // Id 9
            new VerificationData(4, 1, 1.0, 0, 0x3), // Id 10
        };
        #endregion

        #region Leduc HE expected data

        VerificationData[] _expLeducHe = new VerificationData[] 
        { 
            new VerificationData(0, 2, 0.0, -1, 0x3), // Id 0
            new VerificationData(1, 0, .5, -1, 0x3), // Id 1
            new VerificationData(2, 1, .5, -1, 0x3), // Id 2
            new VerificationData(3, 0, 0.0, 0, 0x3), // Id 3
            new VerificationData(4, 1, 0.0, 0, 0x3), // Id 4
            new VerificationData(5, 0, 0.0, 1, 0x3), // Id 5
            new VerificationData(6, 1, 0.0, 1, 0x3), // Id 6
            new VerificationData(6, 1, 2.0, 1, 0x3), // Id 7
            new VerificationData(7, 0, 0.0, 1, 0x2), // Id 8
            new VerificationData(7, 0, 2.0, 1, 0x3), // Id 9
            new VerificationData(7, 0, 4.0, 1, 0x3), // Id 10
            new VerificationData(8, 1, 0.0, 1, 0x1), // Id 11
            new VerificationData(8, 1, 2.0, 1, 0x3), // Id 12
            new VerificationData(5, 0, 2.0, 1, 0x3), // Id 13
            new VerificationData(6, 1, 0.0, 1, 0x1), // Id 14
            new VerificationData(6, 1, 2.0, 1, 0x3), // Id 15
            new VerificationData(6, 1, 4.0, 1, 0x3), // Id 16
            new VerificationData(7, 0, 0.0, 1, 0x2), // Id 17
            new VerificationData(7, 0, 2.0, 1, 0x3), // Id 18
            new VerificationData(4, 1, 1.0, 0, 0x3), // Id 19
            new VerificationData(5, 0, 0.0, 0, 0x2), // Id 20
            new VerificationData(5, 0, 1.0, 0, 0x3), // Id 21
            new VerificationData(6, 0, 0.0, 1, 0x3), // Id 22
            new VerificationData(7, 1, 0.0, 1, 0x3), // Id 23
            new VerificationData(7, 1, 2.0, 1, 0x3), // Id 24
            new VerificationData(8, 0, 0.0, 1, 0x2), // Id 25
            new VerificationData(8, 0, 2.0, 1, 0x3), // Id 26
            new VerificationData(8, 0, 4.0, 1, 0x3), // Id 27
            new VerificationData(9, 1, 0.0, 1, 0x1), // Id 28
            new VerificationData(9, 1, 2.0, 1, 0x3), // Id 29
            new VerificationData(6, 0, 2.0, 1, 0x3), // Id 30
            new VerificationData(7, 1, 0.0, 1, 0x1), // Id 31
            new VerificationData(7, 1, 2.0, 1, 0x3), // Id 32
            new VerificationData(7, 1, 4.0, 1, 0x3), // Id 33
            new VerificationData(8, 0, 0.0, 1, 0x2), // Id 34
            new VerificationData(8, 0, 2.0, 1, 0x3), // Id 35
            new VerificationData(5, 0, 2.0, 0, 0x3), // Id 36
            new VerificationData(6, 1, 0.0, 0, 0x1), // Id 37
            new VerificationData(6, 1, 1.0, 0, 0x3), // Id 38
            new VerificationData(7, 0, 0.0, 1, 0x3), // Id 39
            new VerificationData(8, 1, 0.0, 1, 0x3), // Id 40
            new VerificationData(8, 1, 2.0, 1, 0x3), // Id 41
            new VerificationData(9, 0, 0.0, 1, 0x2), // Id 42
            new VerificationData(9, 0, 2.0, 1, 0x3), // Id 43
            new VerificationData(9, 0, 4.0, 1, 0x3), // Id 44
            new VerificationData(10, 1, 0.0, 1, 0x1), // Id 45
            new VerificationData(10, 1, 2.0, 1, 0x3), // Id 46
            new VerificationData(7, 0, 2.0, 1, 0x3), // Id 47
            new VerificationData(8, 1, 0.0, 1, 0x1), // Id 48
            new VerificationData(8, 1, 2.0, 1, 0x3), // Id 49
            new VerificationData(8, 1, 4.0, 1, 0x3), // Id 50
            new VerificationData(9, 0, 0.0, 1, 0x2), // Id 51
            new VerificationData(9, 0, 2.0, 1, 0x3), // Id 52
            new VerificationData(3, 0, 1.0, 0, 0x3), // Id 53
            new VerificationData(4, 1, 0.0, 0, 0x1), // Id 54
            new VerificationData(4, 1, 1.0, 0, 0x3), // Id 55
            new VerificationData(5, 0, 0.0, 1, 0x3), // Id 56
            new VerificationData(6, 1, 0.0, 1, 0x3), // Id 57
            new VerificationData(6, 1, 2.0, 1, 0x3), // Id 58
            new VerificationData(7, 0, 0.0, 1, 0x2), // Id 59
            new VerificationData(7, 0, 2.0, 1, 0x3), // Id 60
            new VerificationData(7, 0, 4.0, 1, 0x3), // Id 61
            new VerificationData(8, 1, 0.0, 1, 0x1), // Id 62
            new VerificationData(8, 1, 2.0, 1, 0x3), // Id 63
            new VerificationData(5, 0, 2.0, 1, 0x3), // Id 64
            new VerificationData(6, 1, 0.0, 1, 0x1), // Id 65
            new VerificationData(6, 1, 2.0, 1, 0x3), // Id 66
            new VerificationData(6, 1, 4.0, 1, 0x3), // Id 67
            new VerificationData(7, 0, 0.0, 1, 0x2), // Id 68
            new VerificationData(7, 0, 2.0, 1, 0x3), // Id 69        
            new VerificationData(4, 1, 2.0, 0, 0x3), // Id 70
            new VerificationData(5, 0, 0.0, 0, 0x2), // Id 71
            new VerificationData(5, 0, 1.0, 0, 0x3), // Id 72
            new VerificationData(6, 0, 0.0, 1, 0x3), // Id 73
            new VerificationData(7, 1, 0.0, 1, 0x3), // Id 74
            new VerificationData(7, 1, 2.0, 1, 0x3), // Id 75
            new VerificationData(8, 0, 0.0, 1, 0x2), // Id 76
            new VerificationData(8, 0, 2.0, 1, 0x3), // Id 77
            new VerificationData(8, 0, 4.0, 1, 0x3), // Id 78
            new VerificationData(9, 1, 0.0, 1, 0x1), // Id 79
            new VerificationData(9, 1, 2.0, 1, 0x3), // Id 80
            new VerificationData(6, 0, 2.0, 1, 0x3), // Id 81
            new VerificationData(7, 1, 0.0, 1, 0x1), // Id 82
            new VerificationData(7, 1, 2.0, 1, 0x3), // Id 83
            new VerificationData(7, 1, 4.0, 1, 0x3), // Id 84
            new VerificationData(8, 0, 0.0, 1, 0x2), // Id 85
            new VerificationData(8, 0, 2.0, 1, 0x3), // Id 86
        };

        #endregion

        private unsafe void VerifyActionTree(ActionTree tree, VerificationData[] expected)
        {
            Assert.AreEqual(tree.PlayersCount, _gd.MinPlayers);
            Assert.AreEqual(expected.Length, tree.NodesCount);
            for(int i = 0; i < tree.NodesCount; ++i)
            {
                Assert.AreEqual(expected[i].Depth, tree.GetDepth(i), String.Format("Node id {0}", i));
                Assert.AreEqual(expected[i].Position, tree.Nodes[i].Position, String.Format("Node id {0}", i));
                Assert.AreEqual(expected[i].Amount, tree.Nodes[i].Amount, String.Format("Node id {0}", i));
                Assert.AreEqual(expected[i].Round, tree.Nodes[i].Round, String.Format("Node id {0}", i));
                Assert.AreEqual(expected[i].ActivePlayers, tree.Nodes[i].ActivePlayers, String.Format("Node id {0}", i));
            }
        }
        GameDefinition _gd;

        #endregion
    }
}
